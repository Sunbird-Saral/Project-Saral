
swagger: "2.0"
info:
  description: "Store School information"
  version: "1.0.0"
  title: "SARAL APIs "
tags:
- name: "School"
- name: "Student"
- name: "Class"
- name: "Exam"
- name: "ROI"
- name: "Brand"
- name: "ROI V2"

securityDefinitions:
    Bearer:
      type: apiKey
      name: Authorization
      in: header

    basicAuth:
      type: basic
schemes:
  - "https"
  - "http"


paths:

  /schools:
    get:
      tags:
      - School
      summary: "Get School List"
      description: "should return list of school"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: object
            properties:
              schools: 
                $ref: "#/definitions/Schools"
              
        "400":
          description: "unsuccessful operation"
  
  /schools/create:
    post:
      tags:
      - School
      summary: "create school"
      description: "create school"
      parameters:
      - name : body
        in: body
        schema:
          $ref: "#/definitions/CreateSchoolBody"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CreateSchoolResponse"
        "401":
          description: "schoolId: id already exist"
        "400":
          description: "unsuccessful operation"
          

  /schools/{schoolId}:
    delete:
      tags:
      - School
      summary: "Delete School By SchoolId"
      description: ""
      parameters:
        - in: path
          name: schoolId
          type: string
          required: true
      responses:
        "200": 
          description: "School has been deleted."
        "404":
          description: "School Id does not exist."
        "400":
          description: "unsuccessful operation"
      
    patch:
      tags:
      - School
      summary: "Update School By SchoolId"
      description: ""
      parameters:
        - in: path
          name: schoolId
          type: string
          required: true
        - in: body
          name: body
          schema:
            $ref: "#/definitions/UpdateSchoolBody"
      responses:
        "200": 
          description: "School has been updated."
        "404":
          description: "School Id does not exist."
        "400":
          description: "unsuccessful operation"
         
  /classes:
    post:
      security:
        - Bearer: []
      tags:
      - Class
      summary: "Create Class"
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/addClassesBody"
      responses:
        "200":
          description: "successful operation"       
          schema:
            $ref: "#/definitions/addClassesResponse"
          
          
        "400":
          description: "unsuccessful operation"

    delete:
      security:
        - Bearer: []
      tags:
      - Class
      summary: "Delete class by class Id"
      parameters:
       - in: body
         name: body
         schema:
            type: object
            required:
              - classId
            properties:
              classId:
                type: string
                example: "2"
      responses:
        "200": 
          description: "Class has been deleted successfully."
        "404":
          description: "Class does not exist."
        "400":
          description: "unsuccessful updates"
          
    put:
      security:
        - Bearer: []
      tags:
      - Class
      summary: "Update Class"
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/updateClassBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/updateClassResponse"
        "400":
          description: "unsuccessful operation"
        
  
  /fetchStudentsByQuery:
    post:
      security:
        - Bearer: []
      tags:
      - Student
      summary: "Get students list"
      parameters:
       - in: body
         name: body
         schema:
            type: object
            required:
              - classId
            properties:
              classId:
                type: string
                example: "2"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FetchStudentsByQueryResponse"
          
  /student:
    post:
      security:
        - Bearer: []
      tags:
      - Student
      summary: "Create Student"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/CreateStudentBody"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CreateStudentResponse"
        "400":
          description: "Student Id is required."
          
  /student/{studentId}:
    delete:
      tags:
      - Student
      summary: "Delete Student "
      parameters:
        - in: path
          name: studentId
          type: string
          required: true
      responses:
        "200": 
          description: "Student has been deleted."
        "404":
          description: "Student Id does not exist"
        "400":
          description: "unsuccessful operation"
            

    patch:
      tags:
      - Student
      summary: "Update Student"
      parameters:
        - in: path
          name: studentId
          type: string
          required: true
        - in: body
          name: body
          schema:
            $ref: "#/definitions/UpdateStudentBody"
      responses:
        "200":
          description: "Student has been updated."
        "404":
          description: "Student Id does not exist."
        "400":
          description: "unsuccessful operation"
            
  /exam:
    post:
      security:
        - Bearer: []
      tags:
        - Exam
      summary: "Create Exam for a class"
      parameters:
      - in: body
        name: body
        schema:
          $ref: "#/definitions/CreateExamBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CreateExamBodyResponse"
            
  /exam/{examId}:
    delete:
      security:
        - Bearer: []
      tags:
        - Exam
      summary: "Delete exam by class Id"
      parameters:
        - in: path
          name: examId
          type: number
          required: true
      responses:
        "200":
          description: "Exam has been deleted successfully."
        "400":
          description: "Exam Id does not exist."
    
    patch:
      security:
        - Bearer: []
      tags:
        - Exam
      summary: "Update Exam for a class"
      parameters:
      - in: path
        name: examId
        type: number
        required: true
      - in: body
        name: body
        schema:
          $ref: "#/definitions/UpdateExamBody"
      responses:
        "200": 
          description: "Exam is Updated Successfully."
        "404":
          description: "Exam Id does not exist."
        "400": 
          description: "Unsuccessful operation"
    
  /examByClass/{classId}:
    get:
      security:
        - Bearer: []
      tags:
        - Exam
      summary: "Get Exam Details by ClassId"
      parameters:
        - in: path
          name: classId
          type: string
          required: true
        - in: query
          name: subject
          type: string
        - in: query
          name: examDate
          type: string
        
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetExamByClassResponse"
        "404":
          description: "Exam dose not exist for 520"
          
          
  /roi:
    post:
      security:
        - Bearer: []
      tags:
        - ROI
      summary: "Create ROI"
      parameters:
      - in: body
        name: body
        schema:
          $ref: "#/definitions/CreateROIBody"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CreateROIResponse"
        "404":
          description: "examId does not exist"
        "400":
          description: "roiId already exist"
    
  /roi/{examId}:
    patch:
      security:
        - Bearer: []
      tags:
        - ROI
      summary: "Update ROI"
      parameters:
      - in: path
        name: examId
        type: number
        required: true
      - in: body
        name: body
        schema:
          $ref: "#/definitions/UpdateRoiBody"
      responses:
        "200":
          description: "ROI is updated successfully."
        "404":
          description: "ROI Id does not exist."
        "400":
          description: "unsuccessful operation"
            
    delete:
      security:
        - Bearer: []
      tags:
        - ROI
      summary: "Delete ROI"
      parameters:
      - in: path
        name: examId
        type: number
        required: true
      responses:
        "200":
          description: "ROI has been deleted successfully."
        "404":
          description: "ROI ID has been already deleted."
        "400":
          description: "unsuccessful operation"

  /v2/roi:
    post:
      security:
        - Bearer: []
      tags:
        - ROI V2
      summary: "Create ROI v2"
      parameters:
      - in: body
        name: body
        schema:
          $ref: "#/definitions/CreateROIv2Body"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CreateROIv2Response"
        "404":
          description: "examId does not exist"
        "400":
          description: "roiId already exist"
    
  /v2/roi/{schemaName}:
    patch:
      security:
        - Bearer: []
      tags:
        - ROI V2
      summary: "Update ROI v2"
      parameters:
      - in: path
        name: schemaName
        type: string
        required: true
      - in: body
        name: body
        schema:
          $ref: "#/definitions/UpdateRoiBody"
      responses:
        "200":
          description: "ROI is updated successfully."
        "404":
          description: "ROI Id does not exist."
        "400":
          description: "unsuccessful operation"
            
    delete:
      security:
        - Bearer: []
      tags:
        - ROI V2
      summary: "Delete ROI"
      parameters:
      - in: path
        name: schemaName
        type: string
        required: true
      responses:
        "200":
          description: "ROI has been deleted successfully."
        "404":
          description: "ROI ID has been already deleted."
        "400":
          description: "unsuccessful operation"
    get:
      security:
        - Bearer: []
      tags:
      - ROI V2
      summary: "Get ROI v2 data"
      parameters:
      - in: path
        name: schemaName
        type: string
        description: schemaName is required for fetching roi
        required: true

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Roiv2ResponseBody"
        "400":
          description: "unsuccessful operation"
          
  /brand:
    post:
      security:
        - Bearer: []
      tags:
        - Brand
      summary: "Create Brand for state"
      parameters:
      - in: query
        name: default
        type: boolean
        description: The default flag is used when we want to create a deafult logo for school. For creating default brand default flag will be true .
      - in: body
        name: body
        schema:
          $ref: "#/definitions/CreateBrandBody"
      responses:
        "201":
          description: "Brand has been created successfully ."
        "400":
          description: "unsuccessful operation"
          
    delete:
      security:
        - Bearer: []
      tags: 
        - Brand
      summary: "Delete Brand for state"
      responses:
        "200":
          description: "Brand has been deleted successfully."
        "404":
          description: "Brand does not exist."
          
    put:
      security:
        - Bearer: []
      tags:
        - Brand
      summary: "Update Brand for state"     
      parameters:
      - in: body
        name: body
        schema:
          $ref: "#/definitions/CreateBrandBody"
      responses:
        "200":
          description: "Brand has been updated successfully."
        "400":
          description: "unsuccessful operation"
          

definitions:

  
  Schools:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "Dummy school 1"   
          schoolId:
            type: string
            example: "up001"
          state:
            type: string
            example: "up" 
          storeTrainingData:
            type: boolean
            default: false
            example: true
            description: "If this is set to true frontend application will return base 64 encoded images . In savesMarksAPI and getSavedScanAPI these APIs will get data and value of encoded images will be stored in these fields studentIdTrainingData and trainningData, studentIdTrainingData field will contain base 64 encoded images of rollnumber and trainningData field will contain base 64 encoded images for marks. "
          district: 
            type: string
            example: "District 1"
        
    
  CreateSchoolBody:
    type: object
    required:
      - name
      - schoolId
      - password
      - state
    properties:
      name:
        type: string
        example: "dummy school 1"
      schoolId:
        type: string
        example: "u001"
      password: 
        type: string
        example: "abc"
      state:
        type: string
        example: "up"
      autoSync:
        type: boolean
        example: true
      autoSyncFrequency:
          type: number
          description: "Auto Sync frequency in milli-seconds. Saral App uses syncs data in local storage to backend based on this frequency value"
          example: 900000
      storeTrainingData:
        type: boolean
        default: false
        description: "If this is set to true frontend application will return base 64 encoded images . In savesMarksAPI and getSavedScanAPI these APIs will get data and value of encoded images will be stored in these fields studentIdTrainingData and trainningData, studentIdTrainingData field will contain base 64 encoded images of rollnumber and trainningData field will contain base 64 encoded images for marks. "
        example: true
      tags:
        type: boolean
        example: true
      isMinimalMode:
        type: boolean
        description: "if isminimalmode is true then app will not show all the pages it will show minimal pages"
        example: false
      autoSyncBatchSize:
        type: number
        description:  "Limit of student records to be stored in local storage before we push to backend."
        example: 10
      supportEmail:
        type: string
        example: "xyz@gmail.com"
      offlineMode:
        type: boolean
        description: "offline mode is true then it is possible app can run without internet also. "
        example: false
      district:
        type: string
        example: "district 1"

        
  CreateSchoolResponse:
    type: object
    properties:
      schools:
        type: object
        properties:
          name: 
            type: string
            example: "dummy school 1"
          schoolId:
            type: string
            example: "u001"
          state:
            type: string
            example: "up"
          district:
            type: string
            example: "district 1"
      token:
        type: object
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTMwOWQyYjJlNzEyMzAyZGY5NmM3NjEiLCJpYXQiOjE2MzA1NzU5MTV9.FCt2Q4R_sN1ctdOfoOPzBzfdUohAPA-TlLFtJJEeTBE"
        
  UpdateSchoolBody:
    type: object
    properties:
      name:
        type: string
        example: "Dummy school 1"
      state:
        type: string
        example: "up"
      udisceCode:
        type: string
        example: "1"
      autoSync:
        type: boolean
        example: true
      autoSyncFrequency:
        type: number
        description: "Auto Sync frequency in milli-seconds. Saral App uses syncs data in local storage to backend based on this frequency value"
        example: 900000
      storeTrainingData:  
        type: boolean
        default: false
        example: true
        description: "If this is set to true frontend application will return base 64 encoded images . In savesMarksAPI and getSavedScanAPI these APIs will get data and value of encoded images will be stored in these fields studentIdTrainingData and trainningData, studentIdTrainingData field will contain base 64 encoded images of rollnumber and trainningData field will contain base 64 encoded images for marks. "
      tags:
        type: boolean
        example: false
      autoSyncBatchSize:
        type: number
        description:  "Limit of student records to be stored in local storage before we push to backend."
        example: 10
      district:
        type: string
        example: "district 1"
        
  UpdateStudentBody:
    type: object
    required:
      - name
    properties:
      name: 
        type: string
        example: "1210001"
      classId:
        type: string
        example: 2
          
  CreateStudentBody:
    type: object
    required:
       - name
       - studentId
    properties:
      name:
        type: string
        description: "Student Name"
        example: "ram"
      section:
        type: string
        description: "Class Section"
        example: "A"
      studentId:
        type: string
        description: "Student ID"
        example: "1210001"
      classId:
        type: string
        example: 2
      className:
        type: string
        example: "Class-2"
        
  FetchStudentsByQueryResponse:
    type: object
    properties:
      classId:
        type: string
        example: 2
      className:
        type: string
        example: "Class-2"
      section:
        type: string
        example: "D"
      name:
        type: string
        example: "2"
      studentId:
        type: string
        example: "1210001"
      schoolId:
        type: string
        example: "u001"
      
  CreateStudentResponse:
    type: object
    properties:
      classId:
        type: string
        example: 2
      className:
        type: string
        example: "Class-2"
      section:
        type: string
        description: "Class Section"
        example: "D"
      name:
        type: string
        description: "Student Name"
        example: "Ram"
      studentId:
        type: string
        description: "Student Id"
        example: "1210001"
      schoolId:
        type: string
        description: "School Id"
        example: "u001"
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
        
  CreateExamBodyResponse:
      type: object
      properties:
        _id:
          type: string
          description: "Unique Id"
          example: "61922ebd5d6f484c78e8513f"
        subject:
          type: string
          example: "Maths"
        examLo:
          type: string
          example: "Maths"
        classId:
          type: string
          description: "Class Id"
          example: "2"
        examDate:
          type: string
          description: "Exam Of Date"
          example: "24-12-2021"
        totalMarks:
          type: number
          description: "Total Marks"
          example: 20
        type:
          type: string
          description: "exam type"
          example: "uphindi1s"
        questions:
          $ref: '#/definitions/Questions' 
        examId:
          type: number
          description: "Exam Id"
          example: 1
        schoolId:
          type: string
          description: "School Id"
          example: "u001"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
  UpdateExamBody:
    type: object
    properties:
      subject:
        type: string
        example: "Maths"
      examLO:
        type: string
        example: "Maths"
      examDate:
        type: string
        example: "24-12-2021"
      totalMarks:
        type: number
        example: 20
      questions: 
        $ref: '#/definitions/Questions' 
        
  GetExamByClassResponse:
    type: array
    items:
      type: object
      properties: 
        subject:
          type: string
          description: "Exam Name"
          example: "Maths"
        examLO: 
          type: string
          description: "Exam LO"
          example: "Maths"
        classId:
          type: string
          description: "Id of class"
          example: "2"
        examDate:
          type: string
          description: "Date of exam"
          example: "01/10/2021"
        totalMarks:
          type: number
          description: "Total Marks"
          example: 20
        type:
          type: string
          description: "type of Exam"
          example: "uphindi1s"
        set:
          type: array
          items:
            type: string
            example: A,B
        questions:
          $ref: '#/definitions/Questions'  
        examId:
          type: number
          description: "Exam Id"
          example: 1
        schoolId:
          type: string
          description: "Unique Id"
          example: "u001"

  CreateExamBody:
    type: array
    required:
      - subject
      - classId
      - examDate
      - type
    items:
      type: object
      properties:
        subject:
          type: string
          example: "Maths"
        examLo:
          type: string
          example: "Maths"
        classId:
          type: string
          example: "24-12-2021"
        set:
          type: array
          items:
            type: string
            example: A,B
        schoolId:
          type: string
          example: "u001"
        examDate:
          type: string
          example: "24-12-2021"
        type:
          type: string
          description: "exam type"
          example: "uphindi1s"
        questions:
          $ref: '#/definitions/Questions' 
    
  Questions:
    type: array
    items:
      type: object
      properties: 
        questionId:
          type: string
          description: "Question Id"
          example: "1"
        tags: 
          type: array
          items:
            type: object
            properties:
              tagName:
                type: string
                example: "Historic"
              selected:
                type: boolean
                default: false
                example: false
        indicatorTitle:
          type: string
          description: "Indicator Title"
          example: "L0-1"
        questionMarks:
          type: string
          description: "Question Marks"
          example: "1"
          
  rect:
    type: object
    properties:
      top:
        type: string
        example: "129"
      left:
        type: string
        example: "56"
      bottom:
        type: string
        example: "73"
      right:
        type: string
        example: "181"
  
  roi:
    type: array
    items:
      type: object
      properties:
        annotationTags:
          type: string
          example: "ROLLNUMBERID1"
        extractionMethod:
          type: string
          enum: ["NUMERIC_CLASSIFICATION", "CELL_OMR"]
          example: "NUMERIC_CLASSIFICATION"
        roiId:
          type: number
          example: 1
          description: RoiId field is global across school or organisation.
        index:
          type: string
          example: 0
        rect:
          $ref: '#/definitions/rect'
          
  render:
    type: object
    properties:
      index:
        type: string
        example: 1
          
  format:
    type: object
    properties:
      name:
        type: string
        example: "ROLLNUMBER"
      value:
        type: string
        example: "ROLLNUMBER"
        
  validate:
    type: object
    properties:
      regExp:
        type: string
        example: ""
          
  cells:
    type: array
    items:
      type: object
      properties:
        cellId:
          type: number
          example: 1
        rois:
          $ref: '#/definitions/roi'
        render:
          $ref: '#/definitions/render'
        format:
          $ref: '#/definitions/format'
        validate:
          $ref: '#/definitions/validate'
          

          
  rois:
    type: object
    properties:
      layout:
        type: object
        properties:
          version: 
            type: string
            example: "1.0"
          name:
            type: string
            example: "UP SAT Exam Sheet Form"
          identifierPrefix:
            type: string
            example: ROLLNUMBERID
          threshold:
            type: object
            properties:
              minWidth:
                type: number
                example: 690
                description: Minimum widht of layout for detection
              minHeight:
                type: number
                example: 390
                description: Minimum height of layout for detection
              detectionRadius:
                type: number
                example: 12
              experimentalOMRDetection:
                type: boolean
                example: true
                description: when this flag is true pencil detection of layout will be predicted .
          cells:
            $ref: '#/definitions/cells' 
      
  
  CreateROIBody:
    type: object
    required:
      - subject
      - classId
      - type
      - roi
    properties:
      subject:
        type: string
        example: "Maths"
      classId:
        type: string
        example: "2"
      set:
        type: string
        example: A
      type: 
        type: string
        example: "uphindi1s"
      roi:
        $ref: '#/definitions/rois'

  CreateROIv2Body:
    type: object
    required:
      - schemaName
      - roi
    properties:
      schemaName:
        type: string
        example: "admissions"
      roi:
        $ref: '#/definitions/rois'

  CreateROIv2Response:
    type: object
    properties:
      roiId:
        type: number
        example: 1
        description: RoiId field is global across school or organisation.
      schoolId:
        type: string
        example: "u002"
      schemaName:
        type: string
        example: "admissions"
      state:
        type: string
        example: "up"
      createdAt:
        type: string
        format: date-time            
          
  CreateROIResponse:
    type: object
    properties:
      roiId:
        type: number
        example: 1
        description: RoiId field is global across school or organisation.
      classId:
        type: string
        example: "2"
      subject:
        type: string
        example: "Maths"
      state:
        type: string
        example: "up"
      createdAt:
        type: string
        format: date-time
        
  UpdateRoiBody:
    type: object
    required:
      - roi
    properties:
      roi:
        $ref: "#/definitions/rois"

  Roiv2ResponseBody:
    type: object
    properties:
      version: 
            type: string
            example: "1.0"
      name:
        type: string
        example: "UP SAT Exam Sheet Form"
      identifierPrefix:
        type: string
        example: ROLLNUMBERID
      threshold:
        type: object
        properties:
          minWidth:
            type: number
            example: 690
            description: Minimum widht of layout for detection
          minHeight:
            type: number
            example: 390
            description: Minimum height of layout for detection
          detectionRadius:
            type: number
            example: 12
          experimentalOMRDetection:
            type: boolean
            example: true
            description: when this flag is true pencil detection of layout will be predicted .
      cells:
        $ref: '#/definitions/cells'
      roiId: 
        type: string
        example: "12"      
        
  sections:
    type: array
    items:
      type: object
      properties: 
        section:
          type: string
          example: "B"
        
  addClassesBody:
    type: array
    required:
      - classId
    items:
      type: object
      properties: 
        classId:
          type: string
          example: "2"
        sections:
          $ref: "#/definitions/sections"
          
  addClassesResponse:
    type: array
    items:
      type: object
      properties:
        sections:
          $ref: "#/definitions/sections"
        classId:
          type: string
          example: "2"
        className:
          type: string
          example: "Class-2"
        schoolId:
          type: string
          example: "u001"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
  updateClassBody:
    type: object
    required:
       - classId
    properties:
      classId:
        type: string
        example: "2"
      sections: 
          $ref: "#/definitions/sections"
          
  updateClassResponse:
    type: object
    properties:
      sections:
        $ref: "#/definitions/sections"
      classId:
        type: string
        example: "2"
      className:
        type: string
        example: "Class-2"
      schoolId:
        type: string
        example: "u001"
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
        
  CreateBrandBody:
    type: object
    required:
      - appName
      - logoImage
    properties:
      appName:
        type: string
        example: "Saral OCR App"
      themeColor1:
        type: string
        example: "#F09E26"
      themeColor2:
        type: string
        example: "#F09E26"
      themeColor3:
        type: string
        example: "#ACCCCE"
      themeColor4:
        type: string
        example: "#FF5733"
      themeColor5:
        type: string
        example: "#e5b6b3"  
      screenLabels:
        type: object
        properties:
          loginComponent:
            type: array
            items:
              properties:
                UserId:
                  type: string
                  example: "User ID"   
                Password:
                  type: string
                  example: "Password"
                RememberMeText:
                  type: string
                  example: "Remember Me"
                Login Text:
                  type: string
                  example: "Login"
          selectDetails:
            type: array
            items:
              properties:
                School:
                  type: string
                  example: "Organisation"   
                SchoolId:
                  type: string
                  example: "Organisation Id"
                Class:
                  type: string
                  example: "Category"
                Section:
                  type: string
                  example: "Skill"
                Subject:
                  type: string
                  example: "Skill Assesment"
          studentList:
            type: array
            items:
              properties:
                School:
                  type: string
                  example: "Organisation"   
                SchoolId:
                  type: string
                  example: "Organisation Id"

          scanHistory:
            type: array
            items:
              properties:
                School:
                  type: string
                  example: "Organisation"   
                SchoolId:
                  type: string
                  example: "Organisation Id"
              
          myScan:
            type: array
            items:
              properties:
                School:
                  type: string
                  example: "Organisation"   
                SchoolId:
                  type: string
                  example: "Organisation Id"
                  
          scanStatus:
            type: array
            items:
              properties:
                School:
                  type: string
                  example: "Organisation"   
                SchoolId:
                  type: string
                  example: "Organisation Id"
                ReviewScanText:
                  type: string
                  example: "Review Scan"
                SubmitAllScan:
                  type: string
                  example: "Submit all scans"
                SummaryPage:
                  type: string
                  example: "Summary Page"    

            
          scanStatusLocal:
            type: array
            items:
              properties:
                School:
                  type: string
                  example: "Organisation"   
                SchoolId:
                  type: string
                  example: "Organisation Id"
                ReviewScanText:
                  type: string
                  example: "Review Scan"
                SubmitAllScan:
                  type: string
                  example: "Submit all scans"
                SummaryPage:
                  type: string
                  example: "Summary Page"  
            
          scanHistoryCard:
            type: array
            items:
              properties:
                School:
                  type: string
                  example: "Organisation"   
                SchoolId:
                  type: string
                  example: "Organisation Id"
                Class:
                  type: string
                  example: "Category"
                Section:
                  type: string
                  example: "Skill"
                Subject:
                  type: string
                  example: "Skill Assesment"
                ExamDate:
                  type: string
                  example: "Asses. Date"
                ExamType:
                  type: string
                  example: "Asses. Type"
                ExamId:
                  type: string
                  example: "Asses. Id"
                ExamDetail:
                  type: string
                  example: "Asses. Details"  
                Details:
                  type: string
                  example: "Details"
                TotalStudent:
                  type: string
                  example: "Total Students"
                PresentStudents:
                  type: string
                  example: "Present Students"
                ScanNotSubmitedYet:
                  type: string
                  example: "Scan not submited yet"
                TotalScanSubmited:
                  type: string
                  example: "Total scans submited"
                ReviewScanText:
                  type: string
                  example: "Review Scan"
                SubmitAllScan:
                  type: string
                  example: "Submit all scans"
                SummaryPage:
                  type: string
                  example: "Summary Page"
                  
          examDetailsPopup:
            type: array
            items:
              type: string
            example: ["Question Id", "Indicator Title", "Question Marks"]
            
          scannedDetailComponent:
            type: array
            items:
              properties:
                Subject:
                  type: string
                  example: "Skill Assesment"
                StudentId:
                  type: string
                  example: "Employee ID"
                Exam:
                  type: string
                  example: "Assesment"
                EmployeDetail:
                  type: string
                  example: "Employe Details"
                CorrectId:
                  type: string
                  example: "please correct employe id"
                ListTableHeading:
                  type: array
                  example: ["Sr No", "Questions", "Rating"]
                  
                  
        
      logoImage:
        type: string
        example: ""

      supportIcon:
        type: string
        example: "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABHNCSVQICAg
        "

      Logout:
        type: string
        example: ""

      About:
        type: string
        example: "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABmJLR0QA/wD/AP+gvaeTAAAA/ElEQVRoge2YQQrCMBBFn+IBxKXu9BDi6fQ4Ct6sCMatYF10Y2MlQzWZTMyD2ZXwfiedlEClUqnkyAY4Aw5olesGnICVVH4NNBmI+9VIQxwzkP1UR192MhDgAiwkSRVwwDz00J1+6llkqRB+F3pMk+v8mBpAm5j729+vQwPja8x3oMgAUVodC8k38DZ7hSR5EUVuIVOYD1DPAW3Mj9EiO2AKSYCxB1kS/qIDWRPzHFD7F6pjNCVFBhgam1vgis5t3CtOEurhLbBTlA9eLUoC5HBD3dJd7i7HBNAuR/fmRfIEFttLF9HEtDwYlwfj8mBcHozLg3F5gIO2QMUST5trMZMUEmsXAAAAAElFTkSuQmCC"

      Help:
        type: string
        example: "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAABmJLR0QA/wD/AP+gvaeTAAABoElEQVRIie2WzU4CMRDHfxrjTQ8kxC8kfiS+ihEVMcSzD2DAiy/ikagX0Ys3DT6Cr2DwIDHgyZt4MFFYPLQbSoPtFIjxwD+Z7G53pr9Od7YtjPVHmgjwTQN7wDawAqR0+yvwAlSAW6AxqsEtASWgBXQ81gZu9MCGUg74EABtawLZQaHHqAxCoWb2xVBobkioCRdnnsI9vXUgD8xo2weqDv8msCgBX3igiT4xCVQ1/xZ35oOmcVdvXvtlNKgBbOm2A0dci+7v11cFR3AHNbVY2dV126wn9sgETVrgjGtUqO/VsUYf6eu0J7anbxu85gm29Qkc6vtNj++662WckcS+UMsnwDzu4oqreyTgEx0zBzwK/J3gpwBwUsc8CP2rJmjKAteADdfIDL0J/WI9mw92cd0HdhaiiuvlMvLtr6wtEvh/41lAAM4FHZUN/yuBf8kHBbXx+6o7BPwOLEjAoLYy17YYaeA17qluA7tSaKyiBy6pg0IoNFaWsEXFnN6dQaGxksApqjIlWV4i+KYhx9sU3ePtKr3H2xpqDbjTz2P9H/0AJ/xJq47cBwgAAAAASUVORK5CYII="

      ClearCache:
        type: string
        example: "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOx
        "
  
        